// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: proto/linear.proto

#ifndef PROTOBUF_proto_2flinear_2eproto__INCLUDED
#define PROTOBUF_proto_2flinear_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace dmlc {
namespace linear {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_proto_2flinear_2eproto();
void protobuf_AssignDesc_proto_2flinear_2eproto();
void protobuf_ShutdownFile_proto_2flinear_2eproto();

class Config;
class Darlin;

enum Config_Loss {
  Config_Loss_SQUARE = 1,
  Config_Loss_LOGIT = 2,
  Config_Loss_HINGE = 3,
  Config_Loss_SQUARE_HINGE = 4
};
bool Config_Loss_IsValid(int value);
const Config_Loss Config_Loss_Loss_MIN = Config_Loss_SQUARE;
const Config_Loss Config_Loss_Loss_MAX = Config_Loss_SQUARE_HINGE;
const int Config_Loss_Loss_ARRAYSIZE = Config_Loss_Loss_MAX + 1;

const ::google::protobuf::EnumDescriptor* Config_Loss_descriptor();
inline const ::std::string& Config_Loss_Name(Config_Loss value) {
  return ::google::protobuf::internal::NameOfEnum(
    Config_Loss_descriptor(), value);
}
inline bool Config_Loss_Parse(
    const ::std::string& name, Config_Loss* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Config_Loss>(
    Config_Loss_descriptor(), name, value);
}
enum Config_Penalty {
  Config_Penalty_L1 = 1,
  Config_Penalty_L2 = 2
};
bool Config_Penalty_IsValid(int value);
const Config_Penalty Config_Penalty_Penalty_MIN = Config_Penalty_L1;
const Config_Penalty Config_Penalty_Penalty_MAX = Config_Penalty_L2;
const int Config_Penalty_Penalty_ARRAYSIZE = Config_Penalty_Penalty_MAX + 1;

const ::google::protobuf::EnumDescriptor* Config_Penalty_descriptor();
inline const ::std::string& Config_Penalty_Name(Config_Penalty value) {
  return ::google::protobuf::internal::NameOfEnum(
    Config_Penalty_descriptor(), value);
}
inline bool Config_Penalty_Parse(
    const ::std::string& name, Config_Penalty* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Config_Penalty>(
    Config_Penalty_descriptor(), name, value);
}
enum Config_Algo {
  Config_Algo_SGD = 1,
  Config_Algo_ADAGRAD = 2,
  Config_Algo_FTRL = 3,
  Config_Algo_LBFGS = 4,
  Config_Algo_DARLIN = 5
};
bool Config_Algo_IsValid(int value);
const Config_Algo Config_Algo_Algo_MIN = Config_Algo_SGD;
const Config_Algo Config_Algo_Algo_MAX = Config_Algo_DARLIN;
const int Config_Algo_Algo_ARRAYSIZE = Config_Algo_Algo_MAX + 1;

const ::google::protobuf::EnumDescriptor* Config_Algo_descriptor();
inline const ::std::string& Config_Algo_Name(Config_Algo value) {
  return ::google::protobuf::internal::NameOfEnum(
    Config_Algo_descriptor(), value);
}
inline bool Config_Algo_Parse(
    const ::std::string& name, Config_Algo* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Config_Algo>(
    Config_Algo_descriptor(), name, value);
}
enum Config_LearningRate {
  Config_LearningRate_CONSTANT = 1,
  Config_LearningRate_DECAY = 2
};
bool Config_LearningRate_IsValid(int value);
const Config_LearningRate Config_LearningRate_LearningRate_MIN = Config_LearningRate_CONSTANT;
const Config_LearningRate Config_LearningRate_LearningRate_MAX = Config_LearningRate_DECAY;
const int Config_LearningRate_LearningRate_ARRAYSIZE = Config_LearningRate_LearningRate_MAX + 1;

const ::google::protobuf::EnumDescriptor* Config_LearningRate_descriptor();
inline const ::std::string& Config_LearningRate_Name(Config_LearningRate value) {
  return ::google::protobuf::internal::NameOfEnum(
    Config_LearningRate_descriptor(), value);
}
inline bool Config_LearningRate_Parse(
    const ::std::string& name, Config_LearningRate* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Config_LearningRate>(
    Config_LearningRate_descriptor(), name, value);
}
// ===================================================================

class Config : public ::google::protobuf::Message {
 public:
  Config();
  virtual ~Config();

  Config(const Config& from);

  inline Config& operator=(const Config& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Config& default_instance();

  void Swap(Config* other);

  // implements Message ----------------------------------------------

  Config* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Config& from);
  void MergeFrom(const Config& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef Config_Loss Loss;
  static const Loss SQUARE = Config_Loss_SQUARE;
  static const Loss LOGIT = Config_Loss_LOGIT;
  static const Loss HINGE = Config_Loss_HINGE;
  static const Loss SQUARE_HINGE = Config_Loss_SQUARE_HINGE;
  static inline bool Loss_IsValid(int value) {
    return Config_Loss_IsValid(value);
  }
  static const Loss Loss_MIN =
    Config_Loss_Loss_MIN;
  static const Loss Loss_MAX =
    Config_Loss_Loss_MAX;
  static const int Loss_ARRAYSIZE =
    Config_Loss_Loss_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Loss_descriptor() {
    return Config_Loss_descriptor();
  }
  static inline const ::std::string& Loss_Name(Loss value) {
    return Config_Loss_Name(value);
  }
  static inline bool Loss_Parse(const ::std::string& name,
      Loss* value) {
    return Config_Loss_Parse(name, value);
  }

  typedef Config_Penalty Penalty;
  static const Penalty L1 = Config_Penalty_L1;
  static const Penalty L2 = Config_Penalty_L2;
  static inline bool Penalty_IsValid(int value) {
    return Config_Penalty_IsValid(value);
  }
  static const Penalty Penalty_MIN =
    Config_Penalty_Penalty_MIN;
  static const Penalty Penalty_MAX =
    Config_Penalty_Penalty_MAX;
  static const int Penalty_ARRAYSIZE =
    Config_Penalty_Penalty_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Penalty_descriptor() {
    return Config_Penalty_descriptor();
  }
  static inline const ::std::string& Penalty_Name(Penalty value) {
    return Config_Penalty_Name(value);
  }
  static inline bool Penalty_Parse(const ::std::string& name,
      Penalty* value) {
    return Config_Penalty_Parse(name, value);
  }

  typedef Config_Algo Algo;
  static const Algo SGD = Config_Algo_SGD;
  static const Algo ADAGRAD = Config_Algo_ADAGRAD;
  static const Algo FTRL = Config_Algo_FTRL;
  static const Algo LBFGS = Config_Algo_LBFGS;
  static const Algo DARLIN = Config_Algo_DARLIN;
  static inline bool Algo_IsValid(int value) {
    return Config_Algo_IsValid(value);
  }
  static const Algo Algo_MIN =
    Config_Algo_Algo_MIN;
  static const Algo Algo_MAX =
    Config_Algo_Algo_MAX;
  static const int Algo_ARRAYSIZE =
    Config_Algo_Algo_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Algo_descriptor() {
    return Config_Algo_descriptor();
  }
  static inline const ::std::string& Algo_Name(Algo value) {
    return Config_Algo_Name(value);
  }
  static inline bool Algo_Parse(const ::std::string& name,
      Algo* value) {
    return Config_Algo_Parse(name, value);
  }

  typedef Config_LearningRate LearningRate;
  static const LearningRate CONSTANT = Config_LearningRate_CONSTANT;
  static const LearningRate DECAY = Config_LearningRate_DECAY;
  static inline bool LearningRate_IsValid(int value) {
    return Config_LearningRate_IsValid(value);
  }
  static const LearningRate LearningRate_MIN =
    Config_LearningRate_LearningRate_MIN;
  static const LearningRate LearningRate_MAX =
    Config_LearningRate_LearningRate_MAX;
  static const int LearningRate_ARRAYSIZE =
    Config_LearningRate_LearningRate_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  LearningRate_descriptor() {
    return Config_LearningRate_descriptor();
  }
  static inline const ::std::string& LearningRate_Name(LearningRate value) {
    return Config_LearningRate_Name(value);
  }
  static inline bool LearningRate_Parse(const ::std::string& name,
      LearningRate* value) {
    return Config_LearningRate_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional string train_data = 1;
  inline bool has_train_data() const;
  inline void clear_train_data();
  static const int kTrainDataFieldNumber = 1;
  inline const ::std::string& train_data() const;
  inline void set_train_data(const ::std::string& value);
  inline void set_train_data(const char* value);
  inline void set_train_data(const char* value, size_t size);
  inline ::std::string* mutable_train_data();
  inline ::std::string* release_train_data();
  inline void set_allocated_train_data(::std::string* train_data);

  // optional string val_data = 2;
  inline bool has_val_data() const;
  inline void clear_val_data();
  static const int kValDataFieldNumber = 2;
  inline const ::std::string& val_data() const;
  inline void set_val_data(const ::std::string& value);
  inline void set_val_data(const char* value);
  inline void set_val_data(const char* value, size_t size);
  inline ::std::string* mutable_val_data();
  inline ::std::string* release_val_data();
  inline void set_allocated_val_data(::std::string* val_data);

  // optional string data_format = 3 [default = "libsvm"];
  inline bool has_data_format() const;
  inline void clear_data_format();
  static const int kDataFormatFieldNumber = 3;
  inline const ::std::string& data_format() const;
  inline void set_data_format(const ::std::string& value);
  inline void set_data_format(const char* value);
  inline void set_data_format(const char* value, size_t size);
  inline ::std::string* mutable_data_format();
  inline ::std::string* release_data_format();
  inline void set_allocated_data_format(::std::string* data_format);

  // optional string model_in = 4;
  inline bool has_model_in() const;
  inline void clear_model_in();
  static const int kModelInFieldNumber = 4;
  inline const ::std::string& model_in() const;
  inline void set_model_in(const ::std::string& value);
  inline void set_model_in(const char* value);
  inline void set_model_in(const char* value, size_t size);
  inline ::std::string* mutable_model_in();
  inline ::std::string* release_model_in();
  inline void set_allocated_model_in(::std::string* model_in);

  // optional string model_out = 5;
  inline bool has_model_out() const;
  inline void clear_model_out();
  static const int kModelOutFieldNumber = 5;
  inline const ::std::string& model_out() const;
  inline void set_model_out(const ::std::string& value);
  inline void set_model_out(const char* value);
  inline void set_model_out(const char* value, size_t size);
  inline ::std::string* mutable_model_out();
  inline ::std::string* release_model_out();
  inline void set_allocated_model_out(::std::string* model_out);

  // optional .dmlc.linear.Config.Loss loss = 10;
  inline bool has_loss() const;
  inline void clear_loss();
  static const int kLossFieldNumber = 10;
  inline ::dmlc::linear::Config_Loss loss() const;
  inline void set_loss(::dmlc::linear::Config_Loss value);

  // optional .dmlc.linear.Config.Penalty penalty = 11;
  inline bool has_penalty() const;
  inline void clear_penalty();
  static const int kPenaltyFieldNumber = 11;
  inline ::dmlc::linear::Config_Penalty penalty() const;
  inline void set_penalty(::dmlc::linear::Config_Penalty value);

  // repeated float lambda = 12;
  inline int lambda_size() const;
  inline void clear_lambda();
  static const int kLambdaFieldNumber = 12;
  inline float lambda(int index) const;
  inline void set_lambda(int index, float value);
  inline void add_lambda(float value);
  inline const ::google::protobuf::RepeatedField< float >&
      lambda() const;
  inline ::google::protobuf::RepeatedField< float >*
      mutable_lambda();

  // optional .dmlc.linear.Config.Algo algo = 20;
  inline bool has_algo() const;
  inline void clear_algo();
  static const int kAlgoFieldNumber = 20;
  inline ::dmlc::linear::Config_Algo algo() const;
  inline void set_algo(::dmlc::linear::Config_Algo value);

  // optional int32 minibatch = 21 [default = 10000];
  inline bool has_minibatch() const;
  inline void clear_minibatch();
  static const int kMinibatchFieldNumber = 21;
  inline ::google::protobuf::int32 minibatch() const;
  inline void set_minibatch(::google::protobuf::int32 value);

  // optional int32 max_data_pass = 22 [default = 10];
  inline bool has_max_data_pass() const;
  inline void clear_max_data_pass();
  static const int kMaxDataPassFieldNumber = 22;
  inline ::google::protobuf::int32 max_data_pass() const;
  inline void set_max_data_pass(::google::protobuf::int32 value);

  // optional double epsilon = 24 [default = 0.0001];
  inline bool has_epsilon() const;
  inline void clear_epsilon();
  static const int kEpsilonFieldNumber = 24;
  inline double epsilon() const;
  inline void set_epsilon(double value);

  // optional .dmlc.linear.Config.LearningRate lr = 30;
  inline bool has_lr() const;
  inline void clear_lr();
  static const int kLrFieldNumber = 30;
  inline ::dmlc::linear::Config_LearningRate lr() const;
  inline void set_lr(::dmlc::linear::Config_LearningRate value);

  // optional float lr_eta = 31;
  inline bool has_lr_eta() const;
  inline void clear_lr_eta();
  static const int kLrEtaFieldNumber = 31;
  inline float lr_eta() const;
  inline void set_lr_eta(float value);

  // optional float lr_beta = 32;
  inline bool has_lr_beta() const;
  inline void clear_lr_beta();
  static const int kLrBetaFieldNumber = 32;
  inline float lr_beta() const;
  inline void set_lr_beta(float value);

  // optional int32 max_delay = 40 [default = 0];
  inline bool has_max_delay() const;
  inline void clear_max_delay();
  static const int kMaxDelayFieldNumber = 40;
  inline ::google::protobuf::int32 max_delay() const;
  inline void set_max_delay(::google::protobuf::int32 value);

  // optional int32 tail_feature_freq = 41 [default = 0];
  inline bool has_tail_feature_freq() const;
  inline void clear_tail_feature_freq();
  static const int kTailFeatureFreqFieldNumber = 41;
  inline ::google::protobuf::int32 tail_feature_freq() const;
  inline void set_tail_feature_freq(::google::protobuf::int32 value);

  // optional .dmlc.linear.Darlin darlin = 50;
  inline bool has_darlin() const;
  inline void clear_darlin();
  static const int kDarlinFieldNumber = 50;
  inline const ::dmlc::linear::Darlin& darlin() const;
  inline ::dmlc::linear::Darlin* mutable_darlin();
  inline ::dmlc::linear::Darlin* release_darlin();
  inline void set_allocated_darlin(::dmlc::linear::Darlin* darlin);

  // @@protoc_insertion_point(class_scope:dmlc.linear.Config)
 private:
  inline void set_has_train_data();
  inline void clear_has_train_data();
  inline void set_has_val_data();
  inline void clear_has_val_data();
  inline void set_has_data_format();
  inline void clear_has_data_format();
  inline void set_has_model_in();
  inline void clear_has_model_in();
  inline void set_has_model_out();
  inline void clear_has_model_out();
  inline void set_has_loss();
  inline void clear_has_loss();
  inline void set_has_penalty();
  inline void clear_has_penalty();
  inline void set_has_algo();
  inline void clear_has_algo();
  inline void set_has_minibatch();
  inline void clear_has_minibatch();
  inline void set_has_max_data_pass();
  inline void clear_has_max_data_pass();
  inline void set_has_epsilon();
  inline void clear_has_epsilon();
  inline void set_has_lr();
  inline void clear_has_lr();
  inline void set_has_lr_eta();
  inline void clear_has_lr_eta();
  inline void set_has_lr_beta();
  inline void clear_has_lr_beta();
  inline void set_has_max_delay();
  inline void clear_has_max_delay();
  inline void set_has_tail_feature_freq();
  inline void clear_has_tail_feature_freq();
  inline void set_has_darlin();
  inline void clear_has_darlin();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* train_data_;
  ::std::string* val_data_;
  ::std::string* data_format_;
  static ::std::string* _default_data_format_;
  ::std::string* model_in_;
  ::std::string* model_out_;
  int loss_;
  int penalty_;
  ::google::protobuf::RepeatedField< float > lambda_;
  int algo_;
  ::google::protobuf::int32 minibatch_;
  double epsilon_;
  ::google::protobuf::int32 max_data_pass_;
  int lr_;
  float lr_eta_;
  float lr_beta_;
  ::google::protobuf::int32 max_delay_;
  ::google::protobuf::int32 tail_feature_freq_;
  ::dmlc::linear::Darlin* darlin_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(18 + 31) / 32];

  friend void  protobuf_AddDesc_proto_2flinear_2eproto();
  friend void protobuf_AssignDesc_proto_2flinear_2eproto();
  friend void protobuf_ShutdownFile_proto_2flinear_2eproto();

  void InitAsDefaultInstance();
  static Config* default_instance_;
};
// -------------------------------------------------------------------

class Darlin : public ::google::protobuf::Message {
 public:
  Darlin();
  virtual ~Darlin();

  Darlin(const Darlin& from);

  inline Darlin& operator=(const Darlin& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Darlin& default_instance();

  void Swap(Darlin* other);

  // implements Message ----------------------------------------------

  Darlin* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Darlin& from);
  void MergeFrom(const Darlin& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional float feature_block_ratio = 1 [default = 4];
  inline bool has_feature_block_ratio() const;
  inline void clear_feature_block_ratio();
  static const int kFeatureBlockRatioFieldNumber = 1;
  inline float feature_block_ratio() const;
  inline void set_feature_block_ratio(float value);

  // optional bool random_feature_block_order = 2 [default = true];
  inline bool has_random_feature_block_order() const;
  inline void clear_random_feature_block_order();
  static const int kRandomFeatureBlockOrderFieldNumber = 2;
  inline bool random_feature_block_order() const;
  inline void set_random_feature_block_order(bool value);

  // repeated int32 prior_fea_group = 14;
  inline int prior_fea_group_size() const;
  inline void clear_prior_fea_group();
  static const int kPriorFeaGroupFieldNumber = 14;
  inline ::google::protobuf::int32 prior_fea_group(int index) const;
  inline void set_prior_fea_group(int index, ::google::protobuf::int32 value);
  inline void add_prior_fea_group(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      prior_fea_group() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_prior_fea_group();

  // optional int32 num_iter_for_prior_fea_group = 13 [default = 5];
  inline bool has_num_iter_for_prior_fea_group() const;
  inline void clear_num_iter_for_prior_fea_group();
  static const int kNumIterForPriorFeaGroupFieldNumber = 13;
  inline ::google::protobuf::int32 num_iter_for_prior_fea_group() const;
  inline void set_num_iter_for_prior_fea_group(::google::protobuf::int32 value);

  // optional int32 max_num_parallel_groups_in_preprocessing = 9 [default = 1000];
  inline bool has_max_num_parallel_groups_in_preprocessing() const;
  inline void clear_max_num_parallel_groups_in_preprocessing();
  static const int kMaxNumParallelGroupsInPreprocessingFieldNumber = 9;
  inline ::google::protobuf::int32 max_num_parallel_groups_in_preprocessing() const;
  inline void set_max_num_parallel_groups_in_preprocessing(::google::protobuf::int32 value);

  // optional double delta_init_value = 101 [default = 1];
  inline bool has_delta_init_value() const;
  inline void clear_delta_init_value();
  static const int kDeltaInitValueFieldNumber = 101;
  inline double delta_init_value() const;
  inline void set_delta_init_value(double value);

  // optional double delta_max_value = 102 [default = 5];
  inline bool has_delta_max_value() const;
  inline void clear_delta_max_value();
  static const int kDeltaMaxValueFieldNumber = 102;
  inline double delta_max_value() const;
  inline void set_delta_max_value(double value);

  // optional double kkt_filter_threshold_ratio = 103 [default = 10];
  inline bool has_kkt_filter_threshold_ratio() const;
  inline void clear_kkt_filter_threshold_ratio();
  static const int kKktFilterThresholdRatioFieldNumber = 103;
  inline double kkt_filter_threshold_ratio() const;
  inline void set_kkt_filter_threshold_ratio(double value);

  // @@protoc_insertion_point(class_scope:dmlc.linear.Darlin)
 private:
  inline void set_has_feature_block_ratio();
  inline void clear_has_feature_block_ratio();
  inline void set_has_random_feature_block_order();
  inline void clear_has_random_feature_block_order();
  inline void set_has_num_iter_for_prior_fea_group();
  inline void clear_has_num_iter_for_prior_fea_group();
  inline void set_has_max_num_parallel_groups_in_preprocessing();
  inline void clear_has_max_num_parallel_groups_in_preprocessing();
  inline void set_has_delta_init_value();
  inline void clear_has_delta_init_value();
  inline void set_has_delta_max_value();
  inline void clear_has_delta_max_value();
  inline void set_has_kkt_filter_threshold_ratio();
  inline void clear_has_kkt_filter_threshold_ratio();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  float feature_block_ratio_;
  bool random_feature_block_order_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > prior_fea_group_;
  ::google::protobuf::int32 num_iter_for_prior_fea_group_;
  ::google::protobuf::int32 max_num_parallel_groups_in_preprocessing_;
  double delta_init_value_;
  double delta_max_value_;
  double kkt_filter_threshold_ratio_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(8 + 31) / 32];

  friend void  protobuf_AddDesc_proto_2flinear_2eproto();
  friend void protobuf_AssignDesc_proto_2flinear_2eproto();
  friend void protobuf_ShutdownFile_proto_2flinear_2eproto();

  void InitAsDefaultInstance();
  static Darlin* default_instance_;
};
// ===================================================================


// ===================================================================

// Config

// optional string train_data = 1;
inline bool Config::has_train_data() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Config::set_has_train_data() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Config::clear_has_train_data() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Config::clear_train_data() {
  if (train_data_ != &::google::protobuf::internal::kEmptyString) {
    train_data_->clear();
  }
  clear_has_train_data();
}
inline const ::std::string& Config::train_data() const {
  return *train_data_;
}
inline void Config::set_train_data(const ::std::string& value) {
  set_has_train_data();
  if (train_data_ == &::google::protobuf::internal::kEmptyString) {
    train_data_ = new ::std::string;
  }
  train_data_->assign(value);
}
inline void Config::set_train_data(const char* value) {
  set_has_train_data();
  if (train_data_ == &::google::protobuf::internal::kEmptyString) {
    train_data_ = new ::std::string;
  }
  train_data_->assign(value);
}
inline void Config::set_train_data(const char* value, size_t size) {
  set_has_train_data();
  if (train_data_ == &::google::protobuf::internal::kEmptyString) {
    train_data_ = new ::std::string;
  }
  train_data_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Config::mutable_train_data() {
  set_has_train_data();
  if (train_data_ == &::google::protobuf::internal::kEmptyString) {
    train_data_ = new ::std::string;
  }
  return train_data_;
}
inline ::std::string* Config::release_train_data() {
  clear_has_train_data();
  if (train_data_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = train_data_;
    train_data_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Config::set_allocated_train_data(::std::string* train_data) {
  if (train_data_ != &::google::protobuf::internal::kEmptyString) {
    delete train_data_;
  }
  if (train_data) {
    set_has_train_data();
    train_data_ = train_data;
  } else {
    clear_has_train_data();
    train_data_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string val_data = 2;
inline bool Config::has_val_data() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Config::set_has_val_data() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Config::clear_has_val_data() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Config::clear_val_data() {
  if (val_data_ != &::google::protobuf::internal::kEmptyString) {
    val_data_->clear();
  }
  clear_has_val_data();
}
inline const ::std::string& Config::val_data() const {
  return *val_data_;
}
inline void Config::set_val_data(const ::std::string& value) {
  set_has_val_data();
  if (val_data_ == &::google::protobuf::internal::kEmptyString) {
    val_data_ = new ::std::string;
  }
  val_data_->assign(value);
}
inline void Config::set_val_data(const char* value) {
  set_has_val_data();
  if (val_data_ == &::google::protobuf::internal::kEmptyString) {
    val_data_ = new ::std::string;
  }
  val_data_->assign(value);
}
inline void Config::set_val_data(const char* value, size_t size) {
  set_has_val_data();
  if (val_data_ == &::google::protobuf::internal::kEmptyString) {
    val_data_ = new ::std::string;
  }
  val_data_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Config::mutable_val_data() {
  set_has_val_data();
  if (val_data_ == &::google::protobuf::internal::kEmptyString) {
    val_data_ = new ::std::string;
  }
  return val_data_;
}
inline ::std::string* Config::release_val_data() {
  clear_has_val_data();
  if (val_data_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = val_data_;
    val_data_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Config::set_allocated_val_data(::std::string* val_data) {
  if (val_data_ != &::google::protobuf::internal::kEmptyString) {
    delete val_data_;
  }
  if (val_data) {
    set_has_val_data();
    val_data_ = val_data;
  } else {
    clear_has_val_data();
    val_data_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string data_format = 3 [default = "libsvm"];
inline bool Config::has_data_format() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Config::set_has_data_format() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Config::clear_has_data_format() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Config::clear_data_format() {
  if (data_format_ != _default_data_format_) {
    data_format_->assign(*_default_data_format_);
  }
  clear_has_data_format();
}
inline const ::std::string& Config::data_format() const {
  return *data_format_;
}
inline void Config::set_data_format(const ::std::string& value) {
  set_has_data_format();
  if (data_format_ == _default_data_format_) {
    data_format_ = new ::std::string;
  }
  data_format_->assign(value);
}
inline void Config::set_data_format(const char* value) {
  set_has_data_format();
  if (data_format_ == _default_data_format_) {
    data_format_ = new ::std::string;
  }
  data_format_->assign(value);
}
inline void Config::set_data_format(const char* value, size_t size) {
  set_has_data_format();
  if (data_format_ == _default_data_format_) {
    data_format_ = new ::std::string;
  }
  data_format_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Config::mutable_data_format() {
  set_has_data_format();
  if (data_format_ == _default_data_format_) {
    data_format_ = new ::std::string(*_default_data_format_);
  }
  return data_format_;
}
inline ::std::string* Config::release_data_format() {
  clear_has_data_format();
  if (data_format_ == _default_data_format_) {
    return NULL;
  } else {
    ::std::string* temp = data_format_;
    data_format_ = const_cast< ::std::string*>(_default_data_format_);
    return temp;
  }
}
inline void Config::set_allocated_data_format(::std::string* data_format) {
  if (data_format_ != _default_data_format_) {
    delete data_format_;
  }
  if (data_format) {
    set_has_data_format();
    data_format_ = data_format;
  } else {
    clear_has_data_format();
    data_format_ = const_cast< ::std::string*>(_default_data_format_);
  }
}

// optional string model_in = 4;
inline bool Config::has_model_in() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Config::set_has_model_in() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Config::clear_has_model_in() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Config::clear_model_in() {
  if (model_in_ != &::google::protobuf::internal::kEmptyString) {
    model_in_->clear();
  }
  clear_has_model_in();
}
inline const ::std::string& Config::model_in() const {
  return *model_in_;
}
inline void Config::set_model_in(const ::std::string& value) {
  set_has_model_in();
  if (model_in_ == &::google::protobuf::internal::kEmptyString) {
    model_in_ = new ::std::string;
  }
  model_in_->assign(value);
}
inline void Config::set_model_in(const char* value) {
  set_has_model_in();
  if (model_in_ == &::google::protobuf::internal::kEmptyString) {
    model_in_ = new ::std::string;
  }
  model_in_->assign(value);
}
inline void Config::set_model_in(const char* value, size_t size) {
  set_has_model_in();
  if (model_in_ == &::google::protobuf::internal::kEmptyString) {
    model_in_ = new ::std::string;
  }
  model_in_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Config::mutable_model_in() {
  set_has_model_in();
  if (model_in_ == &::google::protobuf::internal::kEmptyString) {
    model_in_ = new ::std::string;
  }
  return model_in_;
}
inline ::std::string* Config::release_model_in() {
  clear_has_model_in();
  if (model_in_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = model_in_;
    model_in_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Config::set_allocated_model_in(::std::string* model_in) {
  if (model_in_ != &::google::protobuf::internal::kEmptyString) {
    delete model_in_;
  }
  if (model_in) {
    set_has_model_in();
    model_in_ = model_in;
  } else {
    clear_has_model_in();
    model_in_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string model_out = 5;
inline bool Config::has_model_out() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Config::set_has_model_out() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Config::clear_has_model_out() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Config::clear_model_out() {
  if (model_out_ != &::google::protobuf::internal::kEmptyString) {
    model_out_->clear();
  }
  clear_has_model_out();
}
inline const ::std::string& Config::model_out() const {
  return *model_out_;
}
inline void Config::set_model_out(const ::std::string& value) {
  set_has_model_out();
  if (model_out_ == &::google::protobuf::internal::kEmptyString) {
    model_out_ = new ::std::string;
  }
  model_out_->assign(value);
}
inline void Config::set_model_out(const char* value) {
  set_has_model_out();
  if (model_out_ == &::google::protobuf::internal::kEmptyString) {
    model_out_ = new ::std::string;
  }
  model_out_->assign(value);
}
inline void Config::set_model_out(const char* value, size_t size) {
  set_has_model_out();
  if (model_out_ == &::google::protobuf::internal::kEmptyString) {
    model_out_ = new ::std::string;
  }
  model_out_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Config::mutable_model_out() {
  set_has_model_out();
  if (model_out_ == &::google::protobuf::internal::kEmptyString) {
    model_out_ = new ::std::string;
  }
  return model_out_;
}
inline ::std::string* Config::release_model_out() {
  clear_has_model_out();
  if (model_out_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = model_out_;
    model_out_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Config::set_allocated_model_out(::std::string* model_out) {
  if (model_out_ != &::google::protobuf::internal::kEmptyString) {
    delete model_out_;
  }
  if (model_out) {
    set_has_model_out();
    model_out_ = model_out;
  } else {
    clear_has_model_out();
    model_out_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional .dmlc.linear.Config.Loss loss = 10;
inline bool Config::has_loss() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void Config::set_has_loss() {
  _has_bits_[0] |= 0x00000020u;
}
inline void Config::clear_has_loss() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void Config::clear_loss() {
  loss_ = 1;
  clear_has_loss();
}
inline ::dmlc::linear::Config_Loss Config::loss() const {
  return static_cast< ::dmlc::linear::Config_Loss >(loss_);
}
inline void Config::set_loss(::dmlc::linear::Config_Loss value) {
  assert(::dmlc::linear::Config_Loss_IsValid(value));
  set_has_loss();
  loss_ = value;
}

// optional .dmlc.linear.Config.Penalty penalty = 11;
inline bool Config::has_penalty() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void Config::set_has_penalty() {
  _has_bits_[0] |= 0x00000040u;
}
inline void Config::clear_has_penalty() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void Config::clear_penalty() {
  penalty_ = 1;
  clear_has_penalty();
}
inline ::dmlc::linear::Config_Penalty Config::penalty() const {
  return static_cast< ::dmlc::linear::Config_Penalty >(penalty_);
}
inline void Config::set_penalty(::dmlc::linear::Config_Penalty value) {
  assert(::dmlc::linear::Config_Penalty_IsValid(value));
  set_has_penalty();
  penalty_ = value;
}

// repeated float lambda = 12;
inline int Config::lambda_size() const {
  return lambda_.size();
}
inline void Config::clear_lambda() {
  lambda_.Clear();
}
inline float Config::lambda(int index) const {
  return lambda_.Get(index);
}
inline void Config::set_lambda(int index, float value) {
  lambda_.Set(index, value);
}
inline void Config::add_lambda(float value) {
  lambda_.Add(value);
}
inline const ::google::protobuf::RepeatedField< float >&
Config::lambda() const {
  return lambda_;
}
inline ::google::protobuf::RepeatedField< float >*
Config::mutable_lambda() {
  return &lambda_;
}

// optional .dmlc.linear.Config.Algo algo = 20;
inline bool Config::has_algo() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void Config::set_has_algo() {
  _has_bits_[0] |= 0x00000100u;
}
inline void Config::clear_has_algo() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void Config::clear_algo() {
  algo_ = 1;
  clear_has_algo();
}
inline ::dmlc::linear::Config_Algo Config::algo() const {
  return static_cast< ::dmlc::linear::Config_Algo >(algo_);
}
inline void Config::set_algo(::dmlc::linear::Config_Algo value) {
  assert(::dmlc::linear::Config_Algo_IsValid(value));
  set_has_algo();
  algo_ = value;
}

// optional int32 minibatch = 21 [default = 10000];
inline bool Config::has_minibatch() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void Config::set_has_minibatch() {
  _has_bits_[0] |= 0x00000200u;
}
inline void Config::clear_has_minibatch() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void Config::clear_minibatch() {
  minibatch_ = 10000;
  clear_has_minibatch();
}
inline ::google::protobuf::int32 Config::minibatch() const {
  return minibatch_;
}
inline void Config::set_minibatch(::google::protobuf::int32 value) {
  set_has_minibatch();
  minibatch_ = value;
}

// optional int32 max_data_pass = 22 [default = 10];
inline bool Config::has_max_data_pass() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void Config::set_has_max_data_pass() {
  _has_bits_[0] |= 0x00000400u;
}
inline void Config::clear_has_max_data_pass() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void Config::clear_max_data_pass() {
  max_data_pass_ = 10;
  clear_has_max_data_pass();
}
inline ::google::protobuf::int32 Config::max_data_pass() const {
  return max_data_pass_;
}
inline void Config::set_max_data_pass(::google::protobuf::int32 value) {
  set_has_max_data_pass();
  max_data_pass_ = value;
}

// optional double epsilon = 24 [default = 0.0001];
inline bool Config::has_epsilon() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void Config::set_has_epsilon() {
  _has_bits_[0] |= 0x00000800u;
}
inline void Config::clear_has_epsilon() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void Config::clear_epsilon() {
  epsilon_ = 0.0001;
  clear_has_epsilon();
}
inline double Config::epsilon() const {
  return epsilon_;
}
inline void Config::set_epsilon(double value) {
  set_has_epsilon();
  epsilon_ = value;
}

// optional .dmlc.linear.Config.LearningRate lr = 30;
inline bool Config::has_lr() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void Config::set_has_lr() {
  _has_bits_[0] |= 0x00001000u;
}
inline void Config::clear_has_lr() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void Config::clear_lr() {
  lr_ = 1;
  clear_has_lr();
}
inline ::dmlc::linear::Config_LearningRate Config::lr() const {
  return static_cast< ::dmlc::linear::Config_LearningRate >(lr_);
}
inline void Config::set_lr(::dmlc::linear::Config_LearningRate value) {
  assert(::dmlc::linear::Config_LearningRate_IsValid(value));
  set_has_lr();
  lr_ = value;
}

// optional float lr_eta = 31;
inline bool Config::has_lr_eta() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void Config::set_has_lr_eta() {
  _has_bits_[0] |= 0x00002000u;
}
inline void Config::clear_has_lr_eta() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void Config::clear_lr_eta() {
  lr_eta_ = 0;
  clear_has_lr_eta();
}
inline float Config::lr_eta() const {
  return lr_eta_;
}
inline void Config::set_lr_eta(float value) {
  set_has_lr_eta();
  lr_eta_ = value;
}

// optional float lr_beta = 32;
inline bool Config::has_lr_beta() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void Config::set_has_lr_beta() {
  _has_bits_[0] |= 0x00004000u;
}
inline void Config::clear_has_lr_beta() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void Config::clear_lr_beta() {
  lr_beta_ = 0;
  clear_has_lr_beta();
}
inline float Config::lr_beta() const {
  return lr_beta_;
}
inline void Config::set_lr_beta(float value) {
  set_has_lr_beta();
  lr_beta_ = value;
}

// optional int32 max_delay = 40 [default = 0];
inline bool Config::has_max_delay() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void Config::set_has_max_delay() {
  _has_bits_[0] |= 0x00008000u;
}
inline void Config::clear_has_max_delay() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void Config::clear_max_delay() {
  max_delay_ = 0;
  clear_has_max_delay();
}
inline ::google::protobuf::int32 Config::max_delay() const {
  return max_delay_;
}
inline void Config::set_max_delay(::google::protobuf::int32 value) {
  set_has_max_delay();
  max_delay_ = value;
}

// optional int32 tail_feature_freq = 41 [default = 0];
inline bool Config::has_tail_feature_freq() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void Config::set_has_tail_feature_freq() {
  _has_bits_[0] |= 0x00010000u;
}
inline void Config::clear_has_tail_feature_freq() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void Config::clear_tail_feature_freq() {
  tail_feature_freq_ = 0;
  clear_has_tail_feature_freq();
}
inline ::google::protobuf::int32 Config::tail_feature_freq() const {
  return tail_feature_freq_;
}
inline void Config::set_tail_feature_freq(::google::protobuf::int32 value) {
  set_has_tail_feature_freq();
  tail_feature_freq_ = value;
}

// optional .dmlc.linear.Darlin darlin = 50;
inline bool Config::has_darlin() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void Config::set_has_darlin() {
  _has_bits_[0] |= 0x00020000u;
}
inline void Config::clear_has_darlin() {
  _has_bits_[0] &= ~0x00020000u;
}
inline void Config::clear_darlin() {
  if (darlin_ != NULL) darlin_->::dmlc::linear::Darlin::Clear();
  clear_has_darlin();
}
inline const ::dmlc::linear::Darlin& Config::darlin() const {
  return darlin_ != NULL ? *darlin_ : *default_instance_->darlin_;
}
inline ::dmlc::linear::Darlin* Config::mutable_darlin() {
  set_has_darlin();
  if (darlin_ == NULL) darlin_ = new ::dmlc::linear::Darlin;
  return darlin_;
}
inline ::dmlc::linear::Darlin* Config::release_darlin() {
  clear_has_darlin();
  ::dmlc::linear::Darlin* temp = darlin_;
  darlin_ = NULL;
  return temp;
}
inline void Config::set_allocated_darlin(::dmlc::linear::Darlin* darlin) {
  delete darlin_;
  darlin_ = darlin;
  if (darlin) {
    set_has_darlin();
  } else {
    clear_has_darlin();
  }
}

// -------------------------------------------------------------------

// Darlin

// optional float feature_block_ratio = 1 [default = 4];
inline bool Darlin::has_feature_block_ratio() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Darlin::set_has_feature_block_ratio() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Darlin::clear_has_feature_block_ratio() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Darlin::clear_feature_block_ratio() {
  feature_block_ratio_ = 4;
  clear_has_feature_block_ratio();
}
inline float Darlin::feature_block_ratio() const {
  return feature_block_ratio_;
}
inline void Darlin::set_feature_block_ratio(float value) {
  set_has_feature_block_ratio();
  feature_block_ratio_ = value;
}

// optional bool random_feature_block_order = 2 [default = true];
inline bool Darlin::has_random_feature_block_order() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Darlin::set_has_random_feature_block_order() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Darlin::clear_has_random_feature_block_order() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Darlin::clear_random_feature_block_order() {
  random_feature_block_order_ = true;
  clear_has_random_feature_block_order();
}
inline bool Darlin::random_feature_block_order() const {
  return random_feature_block_order_;
}
inline void Darlin::set_random_feature_block_order(bool value) {
  set_has_random_feature_block_order();
  random_feature_block_order_ = value;
}

// repeated int32 prior_fea_group = 14;
inline int Darlin::prior_fea_group_size() const {
  return prior_fea_group_.size();
}
inline void Darlin::clear_prior_fea_group() {
  prior_fea_group_.Clear();
}
inline ::google::protobuf::int32 Darlin::prior_fea_group(int index) const {
  return prior_fea_group_.Get(index);
}
inline void Darlin::set_prior_fea_group(int index, ::google::protobuf::int32 value) {
  prior_fea_group_.Set(index, value);
}
inline void Darlin::add_prior_fea_group(::google::protobuf::int32 value) {
  prior_fea_group_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
Darlin::prior_fea_group() const {
  return prior_fea_group_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
Darlin::mutable_prior_fea_group() {
  return &prior_fea_group_;
}

// optional int32 num_iter_for_prior_fea_group = 13 [default = 5];
inline bool Darlin::has_num_iter_for_prior_fea_group() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Darlin::set_has_num_iter_for_prior_fea_group() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Darlin::clear_has_num_iter_for_prior_fea_group() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Darlin::clear_num_iter_for_prior_fea_group() {
  num_iter_for_prior_fea_group_ = 5;
  clear_has_num_iter_for_prior_fea_group();
}
inline ::google::protobuf::int32 Darlin::num_iter_for_prior_fea_group() const {
  return num_iter_for_prior_fea_group_;
}
inline void Darlin::set_num_iter_for_prior_fea_group(::google::protobuf::int32 value) {
  set_has_num_iter_for_prior_fea_group();
  num_iter_for_prior_fea_group_ = value;
}

// optional int32 max_num_parallel_groups_in_preprocessing = 9 [default = 1000];
inline bool Darlin::has_max_num_parallel_groups_in_preprocessing() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Darlin::set_has_max_num_parallel_groups_in_preprocessing() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Darlin::clear_has_max_num_parallel_groups_in_preprocessing() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Darlin::clear_max_num_parallel_groups_in_preprocessing() {
  max_num_parallel_groups_in_preprocessing_ = 1000;
  clear_has_max_num_parallel_groups_in_preprocessing();
}
inline ::google::protobuf::int32 Darlin::max_num_parallel_groups_in_preprocessing() const {
  return max_num_parallel_groups_in_preprocessing_;
}
inline void Darlin::set_max_num_parallel_groups_in_preprocessing(::google::protobuf::int32 value) {
  set_has_max_num_parallel_groups_in_preprocessing();
  max_num_parallel_groups_in_preprocessing_ = value;
}

// optional double delta_init_value = 101 [default = 1];
inline bool Darlin::has_delta_init_value() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void Darlin::set_has_delta_init_value() {
  _has_bits_[0] |= 0x00000020u;
}
inline void Darlin::clear_has_delta_init_value() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void Darlin::clear_delta_init_value() {
  delta_init_value_ = 1;
  clear_has_delta_init_value();
}
inline double Darlin::delta_init_value() const {
  return delta_init_value_;
}
inline void Darlin::set_delta_init_value(double value) {
  set_has_delta_init_value();
  delta_init_value_ = value;
}

// optional double delta_max_value = 102 [default = 5];
inline bool Darlin::has_delta_max_value() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void Darlin::set_has_delta_max_value() {
  _has_bits_[0] |= 0x00000040u;
}
inline void Darlin::clear_has_delta_max_value() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void Darlin::clear_delta_max_value() {
  delta_max_value_ = 5;
  clear_has_delta_max_value();
}
inline double Darlin::delta_max_value() const {
  return delta_max_value_;
}
inline void Darlin::set_delta_max_value(double value) {
  set_has_delta_max_value();
  delta_max_value_ = value;
}

// optional double kkt_filter_threshold_ratio = 103 [default = 10];
inline bool Darlin::has_kkt_filter_threshold_ratio() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void Darlin::set_has_kkt_filter_threshold_ratio() {
  _has_bits_[0] |= 0x00000080u;
}
inline void Darlin::clear_has_kkt_filter_threshold_ratio() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void Darlin::clear_kkt_filter_threshold_ratio() {
  kkt_filter_threshold_ratio_ = 10;
  clear_has_kkt_filter_threshold_ratio();
}
inline double Darlin::kkt_filter_threshold_ratio() const {
  return kkt_filter_threshold_ratio_;
}
inline void Darlin::set_kkt_filter_threshold_ratio(double value) {
  set_has_kkt_filter_threshold_ratio();
  kkt_filter_threshold_ratio_ = value;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace linear
}  // namespace dmlc

#ifndef SWIG
namespace google {
namespace protobuf {

template <>
inline const EnumDescriptor* GetEnumDescriptor< ::dmlc::linear::Config_Loss>() {
  return ::dmlc::linear::Config_Loss_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::dmlc::linear::Config_Penalty>() {
  return ::dmlc::linear::Config_Penalty_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::dmlc::linear::Config_Algo>() {
  return ::dmlc::linear::Config_Algo_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::dmlc::linear::Config_LearningRate>() {
  return ::dmlc::linear::Config_LearningRate_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_proto_2flinear_2eproto__INCLUDED
