// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: proto/linear.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "proto/linear.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace dmlc {
namespace linear {

namespace {

const ::google::protobuf::Descriptor* Config_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Config_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* Config_Loss_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* Config_Penalty_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* Config_Algo_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* Config_LearningRate_descriptor_ = NULL;
const ::google::protobuf::Descriptor* Darlin_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Darlin_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_proto_2flinear_2eproto() {
  protobuf_AddDesc_proto_2flinear_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "proto/linear.proto");
  GOOGLE_CHECK(file != NULL);
  Config_descriptor_ = file->message_type(0);
  static const int Config_offsets_[18] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Config, train_data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Config, val_data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Config, data_format_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Config, model_in_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Config, model_out_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Config, loss_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Config, penalty_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Config, lambda_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Config, algo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Config, minibatch_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Config, max_data_pass_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Config, epsilon_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Config, lr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Config, lr_eta_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Config, lr_beta_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Config, max_delay_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Config, tail_feature_freq_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Config, darlin_),
  };
  Config_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Config_descriptor_,
      Config::default_instance_,
      Config_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Config, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Config, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Config));
  Config_Loss_descriptor_ = Config_descriptor_->enum_type(0);
  Config_Penalty_descriptor_ = Config_descriptor_->enum_type(1);
  Config_Algo_descriptor_ = Config_descriptor_->enum_type(2);
  Config_LearningRate_descriptor_ = Config_descriptor_->enum_type(3);
  Darlin_descriptor_ = file->message_type(1);
  static const int Darlin_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Darlin, feature_block_ratio_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Darlin, random_feature_block_order_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Darlin, prior_fea_group_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Darlin, num_iter_for_prior_fea_group_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Darlin, max_num_parallel_groups_in_preprocessing_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Darlin, delta_init_value_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Darlin, delta_max_value_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Darlin, kkt_filter_threshold_ratio_),
  };
  Darlin_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Darlin_descriptor_,
      Darlin::default_instance_,
      Darlin_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Darlin, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Darlin, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Darlin));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_proto_2flinear_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Config_descriptor_, &Config::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Darlin_descriptor_, &Darlin::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_proto_2flinear_2eproto() {
  delete Config::default_instance_;
  delete Config_reflection_;
  delete Config::_default_data_format_;
  delete Darlin::default_instance_;
  delete Darlin_reflection_;
}

void protobuf_AddDesc_proto_2flinear_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\022proto/linear.proto\022\013dmlc.linear\"\263\005\n\006Co"
    "nfig\022\022\n\ntrain_data\030\001 \001(\t\022\020\n\010val_data\030\002 \001"
    "(\t\022\033\n\013data_format\030\003 \001(\t:\006libsvm\022\020\n\010model"
    "_in\030\004 \001(\t\022\021\n\tmodel_out\030\005 \001(\t\022&\n\004loss\030\n \001"
    "(\0162\030.dmlc.linear.Config.Loss\022,\n\007penalty\030"
    "\013 \001(\0162\033.dmlc.linear.Config.Penalty\022\016\n\006la"
    "mbda\030\014 \003(\002\022&\n\004algo\030\024 \001(\0162\030.dmlc.linear.C"
    "onfig.Algo\022\030\n\tminibatch\030\025 \001(\005:\00510000\022\031\n\r"
    "max_data_pass\030\026 \001(\005:\00210\022\027\n\007epsilon\030\030 \001(\001"
    ":\0060.0001\022,\n\002lr\030\036 \001(\0162 .dmlc.linear.Confi"
    "g.LearningRate\022\016\n\006lr_eta\030\037 \001(\002\022\017\n\007lr_bet"
    "a\030  \001(\002\022\024\n\tmax_delay\030( \001(\005:\0010\022\034\n\021tail_fe"
    "ature_freq\030) \001(\005:\0010\022#\n\006darlin\0302 \001(\0132\023.dm"
    "lc.linear.Darlin\":\n\004Loss\022\n\n\006SQUARE\020\001\022\t\n\005"
    "LOGIT\020\002\022\t\n\005HINGE\020\003\022\020\n\014SQUARE_HINGE\020\004\"\031\n\007"
    "Penalty\022\006\n\002L1\020\001\022\006\n\002L2\020\002\"=\n\004Algo\022\007\n\003SGD\020\001"
    "\022\013\n\007ADAGRAD\020\002\022\010\n\004FTRL\020\003\022\t\n\005LBFGS\020\004\022\n\n\006DA"
    "RLIN\020\005\"\'\n\014LearningRate\022\014\n\010CONSTANT\020\001\022\t\n\005"
    "DECAY\020\002\"\255\002\n\006Darlin\022\036\n\023feature_block_rati"
    "o\030\001 \001(\002:\0014\022(\n\032random_feature_block_order"
    "\030\002 \001(\010:\004true\022\027\n\017prior_fea_group\030\016 \003(\005\022\'\n"
    "\034num_iter_for_prior_fea_group\030\r \001(\005:\0015\0226"
    "\n(max_num_parallel_groups_in_preprocessi"
    "ng\030\t \001(\005:\0041000\022\033\n\020delta_init_value\030e \001(\001"
    ":\0011\022\032\n\017delta_max_value\030f \001(\001:\0015\022&\n\032kkt_f"
    "ilter_threshold_ratio\030g \001(\001:\00210", 1031);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "proto/linear.proto", &protobuf_RegisterTypes);
  Config::_default_data_format_ =
      new ::std::string("libsvm", 6);
  Config::default_instance_ = new Config();
  Darlin::default_instance_ = new Darlin();
  Config::default_instance_->InitAsDefaultInstance();
  Darlin::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_proto_2flinear_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_proto_2flinear_2eproto {
  StaticDescriptorInitializer_proto_2flinear_2eproto() {
    protobuf_AddDesc_proto_2flinear_2eproto();
  }
} static_descriptor_initializer_proto_2flinear_2eproto_;

// ===================================================================

const ::google::protobuf::EnumDescriptor* Config_Loss_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Config_Loss_descriptor_;
}
bool Config_Loss_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const Config_Loss Config::SQUARE;
const Config_Loss Config::LOGIT;
const Config_Loss Config::HINGE;
const Config_Loss Config::SQUARE_HINGE;
const Config_Loss Config::Loss_MIN;
const Config_Loss Config::Loss_MAX;
const int Config::Loss_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* Config_Penalty_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Config_Penalty_descriptor_;
}
bool Config_Penalty_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const Config_Penalty Config::L1;
const Config_Penalty Config::L2;
const Config_Penalty Config::Penalty_MIN;
const Config_Penalty Config::Penalty_MAX;
const int Config::Penalty_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* Config_Algo_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Config_Algo_descriptor_;
}
bool Config_Algo_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const Config_Algo Config::SGD;
const Config_Algo Config::ADAGRAD;
const Config_Algo Config::FTRL;
const Config_Algo Config::LBFGS;
const Config_Algo Config::DARLIN;
const Config_Algo Config::Algo_MIN;
const Config_Algo Config::Algo_MAX;
const int Config::Algo_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* Config_LearningRate_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Config_LearningRate_descriptor_;
}
bool Config_LearningRate_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const Config_LearningRate Config::CONSTANT;
const Config_LearningRate Config::DECAY;
const Config_LearningRate Config::LearningRate_MIN;
const Config_LearningRate Config::LearningRate_MAX;
const int Config::LearningRate_ARRAYSIZE;
#endif  // _MSC_VER
::std::string* Config::_default_data_format_ = NULL;
#ifndef _MSC_VER
const int Config::kTrainDataFieldNumber;
const int Config::kValDataFieldNumber;
const int Config::kDataFormatFieldNumber;
const int Config::kModelInFieldNumber;
const int Config::kModelOutFieldNumber;
const int Config::kLossFieldNumber;
const int Config::kPenaltyFieldNumber;
const int Config::kLambdaFieldNumber;
const int Config::kAlgoFieldNumber;
const int Config::kMinibatchFieldNumber;
const int Config::kMaxDataPassFieldNumber;
const int Config::kEpsilonFieldNumber;
const int Config::kLrFieldNumber;
const int Config::kLrEtaFieldNumber;
const int Config::kLrBetaFieldNumber;
const int Config::kMaxDelayFieldNumber;
const int Config::kTailFeatureFreqFieldNumber;
const int Config::kDarlinFieldNumber;
#endif  // !_MSC_VER

Config::Config()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Config::InitAsDefaultInstance() {
  darlin_ = const_cast< ::dmlc::linear::Darlin*>(&::dmlc::linear::Darlin::default_instance());
}

Config::Config(const Config& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Config::SharedCtor() {
  _cached_size_ = 0;
  train_data_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  val_data_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  data_format_ = const_cast< ::std::string*>(_default_data_format_);
  model_in_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  model_out_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  loss_ = 1;
  penalty_ = 1;
  algo_ = 1;
  minibatch_ = 10000;
  max_data_pass_ = 10;
  epsilon_ = 0.0001;
  lr_ = 1;
  lr_eta_ = 0;
  lr_beta_ = 0;
  max_delay_ = 0;
  tail_feature_freq_ = 0;
  darlin_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Config::~Config() {
  SharedDtor();
}

void Config::SharedDtor() {
  if (train_data_ != &::google::protobuf::internal::kEmptyString) {
    delete train_data_;
  }
  if (val_data_ != &::google::protobuf::internal::kEmptyString) {
    delete val_data_;
  }
  if (data_format_ != _default_data_format_) {
    delete data_format_;
  }
  if (model_in_ != &::google::protobuf::internal::kEmptyString) {
    delete model_in_;
  }
  if (model_out_ != &::google::protobuf::internal::kEmptyString) {
    delete model_out_;
  }
  if (this != default_instance_) {
    delete darlin_;
  }
}

void Config::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Config::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Config_descriptor_;
}

const Config& Config::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_proto_2flinear_2eproto();
  return *default_instance_;
}

Config* Config::default_instance_ = NULL;

Config* Config::New() const {
  return new Config;
}

void Config::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_train_data()) {
      if (train_data_ != &::google::protobuf::internal::kEmptyString) {
        train_data_->clear();
      }
    }
    if (has_val_data()) {
      if (val_data_ != &::google::protobuf::internal::kEmptyString) {
        val_data_->clear();
      }
    }
    if (has_data_format()) {
      if (data_format_ != _default_data_format_) {
        data_format_->assign(*_default_data_format_);
      }
    }
    if (has_model_in()) {
      if (model_in_ != &::google::protobuf::internal::kEmptyString) {
        model_in_->clear();
      }
    }
    if (has_model_out()) {
      if (model_out_ != &::google::protobuf::internal::kEmptyString) {
        model_out_->clear();
      }
    }
    loss_ = 1;
    penalty_ = 1;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    algo_ = 1;
    minibatch_ = 10000;
    max_data_pass_ = 10;
    epsilon_ = 0.0001;
    lr_ = 1;
    lr_eta_ = 0;
    lr_beta_ = 0;
    max_delay_ = 0;
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    tail_feature_freq_ = 0;
    if (has_darlin()) {
      if (darlin_ != NULL) darlin_->::dmlc::linear::Darlin::Clear();
    }
  }
  lambda_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Config::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string train_data = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_train_data()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->train_data().data(), this->train_data().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_val_data;
        break;
      }

      // optional string val_data = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_val_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_val_data()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->val_data().data(), this->val_data().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_data_format;
        break;
      }

      // optional string data_format = 3 [default = "libsvm"];
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_data_format:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_data_format()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->data_format().data(), this->data_format().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_model_in;
        break;
      }

      // optional string model_in = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_model_in:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_model_in()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->model_in().data(), this->model_in().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_model_out;
        break;
      }

      // optional string model_out = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_model_out:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_model_out()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->model_out().data(), this->model_out().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_loss;
        break;
      }

      // optional .dmlc.linear.Config.Loss loss = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_loss:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::dmlc::linear::Config_Loss_IsValid(value)) {
            set_loss(static_cast< ::dmlc::linear::Config_Loss >(value));
          } else {
            mutable_unknown_fields()->AddVarint(10, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_penalty;
        break;
      }

      // optional .dmlc.linear.Config.Penalty penalty = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_penalty:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::dmlc::linear::Config_Penalty_IsValid(value)) {
            set_penalty(static_cast< ::dmlc::linear::Config_Penalty >(value));
          } else {
            mutable_unknown_fields()->AddVarint(11, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(101)) goto parse_lambda;
        break;
      }

      // repeated float lambda = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_lambda:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 101, input, this->mutable_lambda())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_lambda())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(101)) goto parse_lambda;
        if (input->ExpectTag(160)) goto parse_algo;
        break;
      }

      // optional .dmlc.linear.Config.Algo algo = 20;
      case 20: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_algo:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::dmlc::linear::Config_Algo_IsValid(value)) {
            set_algo(static_cast< ::dmlc::linear::Config_Algo >(value));
          } else {
            mutable_unknown_fields()->AddVarint(20, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(168)) goto parse_minibatch;
        break;
      }

      // optional int32 minibatch = 21 [default = 10000];
      case 21: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_minibatch:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &minibatch_)));
          set_has_minibatch();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(176)) goto parse_max_data_pass;
        break;
      }

      // optional int32 max_data_pass = 22 [default = 10];
      case 22: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_max_data_pass:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &max_data_pass_)));
          set_has_max_data_pass();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(193)) goto parse_epsilon;
        break;
      }

      // optional double epsilon = 24 [default = 0.0001];
      case 24: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_epsilon:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &epsilon_)));
          set_has_epsilon();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(240)) goto parse_lr;
        break;
      }

      // optional .dmlc.linear.Config.LearningRate lr = 30;
      case 30: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_lr:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::dmlc::linear::Config_LearningRate_IsValid(value)) {
            set_lr(static_cast< ::dmlc::linear::Config_LearningRate >(value));
          } else {
            mutable_unknown_fields()->AddVarint(30, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(253)) goto parse_lr_eta;
        break;
      }

      // optional float lr_eta = 31;
      case 31: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_lr_eta:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &lr_eta_)));
          set_has_lr_eta();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(261)) goto parse_lr_beta;
        break;
      }

      // optional float lr_beta = 32;
      case 32: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_lr_beta:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &lr_beta_)));
          set_has_lr_beta();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(320)) goto parse_max_delay;
        break;
      }

      // optional int32 max_delay = 40 [default = 0];
      case 40: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_max_delay:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &max_delay_)));
          set_has_max_delay();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(328)) goto parse_tail_feature_freq;
        break;
      }

      // optional int32 tail_feature_freq = 41 [default = 0];
      case 41: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_tail_feature_freq:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &tail_feature_freq_)));
          set_has_tail_feature_freq();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(402)) goto parse_darlin;
        break;
      }

      // optional .dmlc.linear.Darlin darlin = 50;
      case 50: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_darlin:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_darlin()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Config::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string train_data = 1;
  if (has_train_data()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->train_data().data(), this->train_data().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->train_data(), output);
  }

  // optional string val_data = 2;
  if (has_val_data()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->val_data().data(), this->val_data().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->val_data(), output);
  }

  // optional string data_format = 3 [default = "libsvm"];
  if (has_data_format()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->data_format().data(), this->data_format().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->data_format(), output);
  }

  // optional string model_in = 4;
  if (has_model_in()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->model_in().data(), this->model_in().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->model_in(), output);
  }

  // optional string model_out = 5;
  if (has_model_out()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->model_out().data(), this->model_out().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->model_out(), output);
  }

  // optional .dmlc.linear.Config.Loss loss = 10;
  if (has_loss()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      10, this->loss(), output);
  }

  // optional .dmlc.linear.Config.Penalty penalty = 11;
  if (has_penalty()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      11, this->penalty(), output);
  }

  // repeated float lambda = 12;
  for (int i = 0; i < this->lambda_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(
      12, this->lambda(i), output);
  }

  // optional .dmlc.linear.Config.Algo algo = 20;
  if (has_algo()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      20, this->algo(), output);
  }

  // optional int32 minibatch = 21 [default = 10000];
  if (has_minibatch()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(21, this->minibatch(), output);
  }

  // optional int32 max_data_pass = 22 [default = 10];
  if (has_max_data_pass()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(22, this->max_data_pass(), output);
  }

  // optional double epsilon = 24 [default = 0.0001];
  if (has_epsilon()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(24, this->epsilon(), output);
  }

  // optional .dmlc.linear.Config.LearningRate lr = 30;
  if (has_lr()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      30, this->lr(), output);
  }

  // optional float lr_eta = 31;
  if (has_lr_eta()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(31, this->lr_eta(), output);
  }

  // optional float lr_beta = 32;
  if (has_lr_beta()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(32, this->lr_beta(), output);
  }

  // optional int32 max_delay = 40 [default = 0];
  if (has_max_delay()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(40, this->max_delay(), output);
  }

  // optional int32 tail_feature_freq = 41 [default = 0];
  if (has_tail_feature_freq()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(41, this->tail_feature_freq(), output);
  }

  // optional .dmlc.linear.Darlin darlin = 50;
  if (has_darlin()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      50, this->darlin(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Config::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string train_data = 1;
  if (has_train_data()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->train_data().data(), this->train_data().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->train_data(), target);
  }

  // optional string val_data = 2;
  if (has_val_data()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->val_data().data(), this->val_data().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->val_data(), target);
  }

  // optional string data_format = 3 [default = "libsvm"];
  if (has_data_format()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->data_format().data(), this->data_format().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->data_format(), target);
  }

  // optional string model_in = 4;
  if (has_model_in()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->model_in().data(), this->model_in().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->model_in(), target);
  }

  // optional string model_out = 5;
  if (has_model_out()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->model_out().data(), this->model_out().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->model_out(), target);
  }

  // optional .dmlc.linear.Config.Loss loss = 10;
  if (has_loss()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      10, this->loss(), target);
  }

  // optional .dmlc.linear.Config.Penalty penalty = 11;
  if (has_penalty()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      11, this->penalty(), target);
  }

  // repeated float lambda = 12;
  for (int i = 0; i < this->lambda_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteFloatToArray(12, this->lambda(i), target);
  }

  // optional .dmlc.linear.Config.Algo algo = 20;
  if (has_algo()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      20, this->algo(), target);
  }

  // optional int32 minibatch = 21 [default = 10000];
  if (has_minibatch()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(21, this->minibatch(), target);
  }

  // optional int32 max_data_pass = 22 [default = 10];
  if (has_max_data_pass()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(22, this->max_data_pass(), target);
  }

  // optional double epsilon = 24 [default = 0.0001];
  if (has_epsilon()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(24, this->epsilon(), target);
  }

  // optional .dmlc.linear.Config.LearningRate lr = 30;
  if (has_lr()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      30, this->lr(), target);
  }

  // optional float lr_eta = 31;
  if (has_lr_eta()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(31, this->lr_eta(), target);
  }

  // optional float lr_beta = 32;
  if (has_lr_beta()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(32, this->lr_beta(), target);
  }

  // optional int32 max_delay = 40 [default = 0];
  if (has_max_delay()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(40, this->max_delay(), target);
  }

  // optional int32 tail_feature_freq = 41 [default = 0];
  if (has_tail_feature_freq()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(41, this->tail_feature_freq(), target);
  }

  // optional .dmlc.linear.Darlin darlin = 50;
  if (has_darlin()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        50, this->darlin(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Config::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string train_data = 1;
    if (has_train_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->train_data());
    }

    // optional string val_data = 2;
    if (has_val_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->val_data());
    }

    // optional string data_format = 3 [default = "libsvm"];
    if (has_data_format()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->data_format());
    }

    // optional string model_in = 4;
    if (has_model_in()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->model_in());
    }

    // optional string model_out = 5;
    if (has_model_out()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->model_out());
    }

    // optional .dmlc.linear.Config.Loss loss = 10;
    if (has_loss()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->loss());
    }

    // optional .dmlc.linear.Config.Penalty penalty = 11;
    if (has_penalty()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->penalty());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional .dmlc.linear.Config.Algo algo = 20;
    if (has_algo()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->algo());
    }

    // optional int32 minibatch = 21 [default = 10000];
    if (has_minibatch()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->minibatch());
    }

    // optional int32 max_data_pass = 22 [default = 10];
    if (has_max_data_pass()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->max_data_pass());
    }

    // optional double epsilon = 24 [default = 0.0001];
    if (has_epsilon()) {
      total_size += 2 + 8;
    }

    // optional .dmlc.linear.Config.LearningRate lr = 30;
    if (has_lr()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->lr());
    }

    // optional float lr_eta = 31;
    if (has_lr_eta()) {
      total_size += 2 + 4;
    }

    // optional float lr_beta = 32;
    if (has_lr_beta()) {
      total_size += 2 + 4;
    }

    // optional int32 max_delay = 40 [default = 0];
    if (has_max_delay()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->max_delay());
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional int32 tail_feature_freq = 41 [default = 0];
    if (has_tail_feature_freq()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->tail_feature_freq());
    }

    // optional .dmlc.linear.Darlin darlin = 50;
    if (has_darlin()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->darlin());
    }

  }
  // repeated float lambda = 12;
  {
    int data_size = 0;
    data_size = 4 * this->lambda_size();
    total_size += 1 * this->lambda_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Config::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Config* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Config*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Config::MergeFrom(const Config& from) {
  GOOGLE_CHECK_NE(&from, this);
  lambda_.MergeFrom(from.lambda_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_train_data()) {
      set_train_data(from.train_data());
    }
    if (from.has_val_data()) {
      set_val_data(from.val_data());
    }
    if (from.has_data_format()) {
      set_data_format(from.data_format());
    }
    if (from.has_model_in()) {
      set_model_in(from.model_in());
    }
    if (from.has_model_out()) {
      set_model_out(from.model_out());
    }
    if (from.has_loss()) {
      set_loss(from.loss());
    }
    if (from.has_penalty()) {
      set_penalty(from.penalty());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_algo()) {
      set_algo(from.algo());
    }
    if (from.has_minibatch()) {
      set_minibatch(from.minibatch());
    }
    if (from.has_max_data_pass()) {
      set_max_data_pass(from.max_data_pass());
    }
    if (from.has_epsilon()) {
      set_epsilon(from.epsilon());
    }
    if (from.has_lr()) {
      set_lr(from.lr());
    }
    if (from.has_lr_eta()) {
      set_lr_eta(from.lr_eta());
    }
    if (from.has_lr_beta()) {
      set_lr_beta(from.lr_beta());
    }
    if (from.has_max_delay()) {
      set_max_delay(from.max_delay());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_tail_feature_freq()) {
      set_tail_feature_freq(from.tail_feature_freq());
    }
    if (from.has_darlin()) {
      mutable_darlin()->::dmlc::linear::Darlin::MergeFrom(from.darlin());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Config::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Config::CopyFrom(const Config& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Config::IsInitialized() const {

  return true;
}

void Config::Swap(Config* other) {
  if (other != this) {
    std::swap(train_data_, other->train_data_);
    std::swap(val_data_, other->val_data_);
    std::swap(data_format_, other->data_format_);
    std::swap(model_in_, other->model_in_);
    std::swap(model_out_, other->model_out_);
    std::swap(loss_, other->loss_);
    std::swap(penalty_, other->penalty_);
    lambda_.Swap(&other->lambda_);
    std::swap(algo_, other->algo_);
    std::swap(minibatch_, other->minibatch_);
    std::swap(max_data_pass_, other->max_data_pass_);
    std::swap(epsilon_, other->epsilon_);
    std::swap(lr_, other->lr_);
    std::swap(lr_eta_, other->lr_eta_);
    std::swap(lr_beta_, other->lr_beta_);
    std::swap(max_delay_, other->max_delay_);
    std::swap(tail_feature_freq_, other->tail_feature_freq_);
    std::swap(darlin_, other->darlin_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Config::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Config_descriptor_;
  metadata.reflection = Config_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Darlin::kFeatureBlockRatioFieldNumber;
const int Darlin::kRandomFeatureBlockOrderFieldNumber;
const int Darlin::kPriorFeaGroupFieldNumber;
const int Darlin::kNumIterForPriorFeaGroupFieldNumber;
const int Darlin::kMaxNumParallelGroupsInPreprocessingFieldNumber;
const int Darlin::kDeltaInitValueFieldNumber;
const int Darlin::kDeltaMaxValueFieldNumber;
const int Darlin::kKktFilterThresholdRatioFieldNumber;
#endif  // !_MSC_VER

Darlin::Darlin()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Darlin::InitAsDefaultInstance() {
}

Darlin::Darlin(const Darlin& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Darlin::SharedCtor() {
  _cached_size_ = 0;
  feature_block_ratio_ = 4;
  random_feature_block_order_ = true;
  num_iter_for_prior_fea_group_ = 5;
  max_num_parallel_groups_in_preprocessing_ = 1000;
  delta_init_value_ = 1;
  delta_max_value_ = 5;
  kkt_filter_threshold_ratio_ = 10;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Darlin::~Darlin() {
  SharedDtor();
}

void Darlin::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Darlin::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Darlin::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Darlin_descriptor_;
}

const Darlin& Darlin::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_proto_2flinear_2eproto();
  return *default_instance_;
}

Darlin* Darlin::default_instance_ = NULL;

Darlin* Darlin::New() const {
  return new Darlin;
}

void Darlin::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    feature_block_ratio_ = 4;
    random_feature_block_order_ = true;
    num_iter_for_prior_fea_group_ = 5;
    max_num_parallel_groups_in_preprocessing_ = 1000;
    delta_init_value_ = 1;
    delta_max_value_ = 5;
    kkt_filter_threshold_ratio_ = 10;
  }
  prior_fea_group_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Darlin::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional float feature_block_ratio = 1 [default = 4];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &feature_block_ratio_)));
          set_has_feature_block_ratio();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_random_feature_block_order;
        break;
      }

      // optional bool random_feature_block_order = 2 [default = true];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_random_feature_block_order:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &random_feature_block_order_)));
          set_has_random_feature_block_order();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_max_num_parallel_groups_in_preprocessing;
        break;
      }

      // optional int32 max_num_parallel_groups_in_preprocessing = 9 [default = 1000];
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_max_num_parallel_groups_in_preprocessing:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &max_num_parallel_groups_in_preprocessing_)));
          set_has_max_num_parallel_groups_in_preprocessing();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(104)) goto parse_num_iter_for_prior_fea_group;
        break;
      }

      // optional int32 num_iter_for_prior_fea_group = 13 [default = 5];
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_num_iter_for_prior_fea_group:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &num_iter_for_prior_fea_group_)));
          set_has_num_iter_for_prior_fea_group();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(112)) goto parse_prior_fea_group;
        break;
      }

      // repeated int32 prior_fea_group = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_prior_fea_group:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 112, input, this->mutable_prior_fea_group())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_prior_fea_group())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(112)) goto parse_prior_fea_group;
        if (input->ExpectTag(809)) goto parse_delta_init_value;
        break;
      }

      // optional double delta_init_value = 101 [default = 1];
      case 101: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_delta_init_value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &delta_init_value_)));
          set_has_delta_init_value();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(817)) goto parse_delta_max_value;
        break;
      }

      // optional double delta_max_value = 102 [default = 5];
      case 102: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_delta_max_value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &delta_max_value_)));
          set_has_delta_max_value();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(825)) goto parse_kkt_filter_threshold_ratio;
        break;
      }

      // optional double kkt_filter_threshold_ratio = 103 [default = 10];
      case 103: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_kkt_filter_threshold_ratio:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &kkt_filter_threshold_ratio_)));
          set_has_kkt_filter_threshold_ratio();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Darlin::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional float feature_block_ratio = 1 [default = 4];
  if (has_feature_block_ratio()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->feature_block_ratio(), output);
  }

  // optional bool random_feature_block_order = 2 [default = true];
  if (has_random_feature_block_order()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->random_feature_block_order(), output);
  }

  // optional int32 max_num_parallel_groups_in_preprocessing = 9 [default = 1000];
  if (has_max_num_parallel_groups_in_preprocessing()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->max_num_parallel_groups_in_preprocessing(), output);
  }

  // optional int32 num_iter_for_prior_fea_group = 13 [default = 5];
  if (has_num_iter_for_prior_fea_group()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(13, this->num_iter_for_prior_fea_group(), output);
  }

  // repeated int32 prior_fea_group = 14;
  for (int i = 0; i < this->prior_fea_group_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      14, this->prior_fea_group(i), output);
  }

  // optional double delta_init_value = 101 [default = 1];
  if (has_delta_init_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(101, this->delta_init_value(), output);
  }

  // optional double delta_max_value = 102 [default = 5];
  if (has_delta_max_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(102, this->delta_max_value(), output);
  }

  // optional double kkt_filter_threshold_ratio = 103 [default = 10];
  if (has_kkt_filter_threshold_ratio()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(103, this->kkt_filter_threshold_ratio(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Darlin::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional float feature_block_ratio = 1 [default = 4];
  if (has_feature_block_ratio()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->feature_block_ratio(), target);
  }

  // optional bool random_feature_block_order = 2 [default = true];
  if (has_random_feature_block_order()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->random_feature_block_order(), target);
  }

  // optional int32 max_num_parallel_groups_in_preprocessing = 9 [default = 1000];
  if (has_max_num_parallel_groups_in_preprocessing()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->max_num_parallel_groups_in_preprocessing(), target);
  }

  // optional int32 num_iter_for_prior_fea_group = 13 [default = 5];
  if (has_num_iter_for_prior_fea_group()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(13, this->num_iter_for_prior_fea_group(), target);
  }

  // repeated int32 prior_fea_group = 14;
  for (int i = 0; i < this->prior_fea_group_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(14, this->prior_fea_group(i), target);
  }

  // optional double delta_init_value = 101 [default = 1];
  if (has_delta_init_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(101, this->delta_init_value(), target);
  }

  // optional double delta_max_value = 102 [default = 5];
  if (has_delta_max_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(102, this->delta_max_value(), target);
  }

  // optional double kkt_filter_threshold_ratio = 103 [default = 10];
  if (has_kkt_filter_threshold_ratio()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(103, this->kkt_filter_threshold_ratio(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Darlin::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional float feature_block_ratio = 1 [default = 4];
    if (has_feature_block_ratio()) {
      total_size += 1 + 4;
    }

    // optional bool random_feature_block_order = 2 [default = true];
    if (has_random_feature_block_order()) {
      total_size += 1 + 1;
    }

    // optional int32 num_iter_for_prior_fea_group = 13 [default = 5];
    if (has_num_iter_for_prior_fea_group()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->num_iter_for_prior_fea_group());
    }

    // optional int32 max_num_parallel_groups_in_preprocessing = 9 [default = 1000];
    if (has_max_num_parallel_groups_in_preprocessing()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->max_num_parallel_groups_in_preprocessing());
    }

    // optional double delta_init_value = 101 [default = 1];
    if (has_delta_init_value()) {
      total_size += 2 + 8;
    }

    // optional double delta_max_value = 102 [default = 5];
    if (has_delta_max_value()) {
      total_size += 2 + 8;
    }

    // optional double kkt_filter_threshold_ratio = 103 [default = 10];
    if (has_kkt_filter_threshold_ratio()) {
      total_size += 2 + 8;
    }

  }
  // repeated int32 prior_fea_group = 14;
  {
    int data_size = 0;
    for (int i = 0; i < this->prior_fea_group_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->prior_fea_group(i));
    }
    total_size += 1 * this->prior_fea_group_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Darlin::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Darlin* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Darlin*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Darlin::MergeFrom(const Darlin& from) {
  GOOGLE_CHECK_NE(&from, this);
  prior_fea_group_.MergeFrom(from.prior_fea_group_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_feature_block_ratio()) {
      set_feature_block_ratio(from.feature_block_ratio());
    }
    if (from.has_random_feature_block_order()) {
      set_random_feature_block_order(from.random_feature_block_order());
    }
    if (from.has_num_iter_for_prior_fea_group()) {
      set_num_iter_for_prior_fea_group(from.num_iter_for_prior_fea_group());
    }
    if (from.has_max_num_parallel_groups_in_preprocessing()) {
      set_max_num_parallel_groups_in_preprocessing(from.max_num_parallel_groups_in_preprocessing());
    }
    if (from.has_delta_init_value()) {
      set_delta_init_value(from.delta_init_value());
    }
    if (from.has_delta_max_value()) {
      set_delta_max_value(from.delta_max_value());
    }
    if (from.has_kkt_filter_threshold_ratio()) {
      set_kkt_filter_threshold_ratio(from.kkt_filter_threshold_ratio());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Darlin::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Darlin::CopyFrom(const Darlin& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Darlin::IsInitialized() const {

  return true;
}

void Darlin::Swap(Darlin* other) {
  if (other != this) {
    std::swap(feature_block_ratio_, other->feature_block_ratio_);
    std::swap(random_feature_block_order_, other->random_feature_block_order_);
    prior_fea_group_.Swap(&other->prior_fea_group_);
    std::swap(num_iter_for_prior_fea_group_, other->num_iter_for_prior_fea_group_);
    std::swap(max_num_parallel_groups_in_preprocessing_, other->max_num_parallel_groups_in_preprocessing_);
    std::swap(delta_init_value_, other->delta_init_value_);
    std::swap(delta_max_value_, other->delta_max_value_);
    std::swap(kkt_filter_threshold_ratio_, other->kkt_filter_threshold_ratio_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Darlin::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Darlin_descriptor_;
  metadata.reflection = Darlin_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace linear
}  // namespace dmlc

// @@protoc_insertion_point(global_scope)
